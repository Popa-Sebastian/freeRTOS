
FreeRtos_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c2c  08001c2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c2c  08001c2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c2c  08001c2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c2c  08001c2c  00011c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c30  08001c30  00011c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08001c40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001c40  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000950e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016bb  00000000  00000000  0002954a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209db  00000000  00000000  0002bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008457  00000000  00000000  0004c58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d08e1  00000000  00000000  000549e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001252c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb0  00000000  00000000  00125318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001bd4 	.word	0x08001bd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08001bd4 	.word	0x08001bd4

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 f96e 	bl	80004c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f803 	bl	80001f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f852 	bl	8000294 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0x10>

080001f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b096      	sub	sp, #88	; 0x58
 80001f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2244      	movs	r2, #68	; 0x44
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fcdf 	bl	8001bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000214:	2302      	movs	r3, #2
 8000216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800021c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2340      	movs	r3, #64	; 0x40
 8000220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000226:	2302      	movs	r3, #2
 8000228:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800022a:	2301      	movs	r3, #1
 800022c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800022e:	230a      	movs	r3, #10
 8000230:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000232:	2307      	movs	r3, #7
 8000234:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000236:	2302      	movs	r3, #2
 8000238:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800023a:	2302      	movs	r3, #2
 800023c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0314 	add.w	r3, r7, #20
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fc82 	bl	8000b4c <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800024e:	f000 f8bd 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2303      	movs	r3, #3
 8000258:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000266:	463b      	mov	r3, r7
 8000268:	2104      	movs	r1, #4
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f880 	bl	8001370 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000276:	f000 f8a9 	bl	80003cc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800027a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800027e:	f000 fc0f 	bl	8000aa0 <HAL_PWREx_ControlVoltageScaling>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000288:	f000 f8a0 	bl	80003cc <Error_Handler>
  }
}
 800028c:	bf00      	nop
 800028e:	3758      	adds	r7, #88	; 0x58
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002aa:	4b45      	ldr	r3, [pc, #276]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	4a44      	ldr	r2, [pc, #272]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002b0:	f043 0304 	orr.w	r3, r3, #4
 80002b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b6:	4b42      	ldr	r3, [pc, #264]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	f003 0304 	and.w	r3, r3, #4
 80002be:	613b      	str	r3, [r7, #16]
 80002c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002c2:	4b3f      	ldr	r3, [pc, #252]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a3e      	ldr	r2, [pc, #248]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b3c      	ldr	r3, [pc, #240]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002da:	4b39      	ldr	r3, [pc, #228]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4a38      	ldr	r2, [pc, #224]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e6:	4b36      	ldr	r3, [pc, #216]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f2:	4b33      	ldr	r3, [pc, #204]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a32      	ldr	r2, [pc, #200]	; (80003c0 <MX_GPIO_Init+0x12c>)
 80002f8:	f043 0302 	orr.w	r3, r3, #2
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fe:	4b30      	ldr	r3, [pc, #192]	; (80003c0 <MX_GPIO_Init+0x12c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	f003 0302 	and.w	r3, r3, #2
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	21b0      	movs	r1, #176	; 0xb0
 800030e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000312:	f000 fb9f 	bl	8000a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031c:	4829      	ldr	r0, [pc, #164]	; (80003c4 <MX_GPIO_Init+0x130>)
 800031e:	f000 fb99 	bl	8000a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000328:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	4619      	mov	r1, r3
 8000338:	4823      	ldr	r0, [pc, #140]	; (80003c8 <MX_GPIO_Init+0x134>)
 800033a:	f000 fa11 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800033e:	230c      	movs	r3, #12
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000342:	2302      	movs	r3, #2
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800034e:	2307      	movs	r3, #7
 8000350:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035c:	f000 fa00 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000360:	23b0      	movs	r3, #176	; 0xb0
 8000362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2300      	movs	r3, #0
 800036e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	4619      	mov	r1, r3
 8000376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037a:	f000 f9f1 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000382:	2300      	movs	r3, #0
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000386:	2301      	movs	r3, #1
 8000388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f000 f9e4 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2300      	movs	r3, #0
 80003a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4619      	mov	r1, r3
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_GPIO_Init+0x130>)
 80003b2:	f000 f9d5 	bl	8000760 <HAL_GPIO_Init>

}
 80003b6:	bf00      	nop
 80003b8:	3728      	adds	r7, #40	; 0x28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	48000400 	.word	0x48000400
 80003c8:	48000800 	.word	0x48000800

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <HAL_MspInit+0x44>)
 80003e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <HAL_MspInit+0x44>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6613      	str	r3, [r2, #96]	; 0x60
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <HAL_MspInit+0x44>)
 80003ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <HAL_MspInit+0x44>)
 80003f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003fa:	4a08      	ldr	r2, [pc, #32]	; (800041c <HAL_MspInit+0x44>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	6593      	str	r3, [r2, #88]	; 0x58
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_MspInit+0x44>)
 8000404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000424:	e7fe      	b.n	8000424 <NMI_Handler+0x4>

08000426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042a:	e7fe      	b.n	800042a <HardFault_Handler+0x4>

0800042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	e7fe      	b.n	8000430 <MemManage_Handler+0x4>

08000432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000436:	e7fe      	b.n	8000436 <BusFault_Handler+0x4>

08000438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043c:	e7fe      	b.n	800043c <UsageFault_Handler+0x4>

0800043e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <SystemInit+0x20>)
 8000452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000456:	4a05      	ldr	r2, [pc, #20]	; (800046c <SystemInit+0x20>)
 8000458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800045c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000474:	f7ff ffea 	bl	800044c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800049e:	f001 fb6d 	bl	8001b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004a2:	f7ff fe9d 	bl	80001e0 <main>

080004a6 <LoopForever>:

LoopForever:
    b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004a8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004b4:	08001c34 	.word	0x08001c34
  ldr r2, =_sbss
 80004b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004bc:	200000c0 	.word	0x200000c0

080004c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC1_IRQHandler>
	...

080004c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ca:	2300      	movs	r3, #0
 80004cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_Init+0x3c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <HAL_Init+0x3c>)
 80004d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004da:	2003      	movs	r0, #3
 80004dc:	f000 f90c 	bl	80006f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e0:	2000      	movs	r0, #0
 80004e2:	f000 f80f 	bl	8000504 <HAL_InitTick>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004ec:	2301      	movs	r3, #1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	e001      	b.n	80004f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f2:	f7ff ff71 	bl	80003d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40022000 	.word	0x40022000

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <HAL_InitTick+0x6c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d023      	beq.n	8000560 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <HAL_InitTick+0x70>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_InitTick+0x6c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	fbb3 f3f1 	udiv	r3, r3, r1
 800052a:	fbb2 f3f3 	udiv	r3, r2, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f909 	bl	8000746 <HAL_SYSTICK_Config>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d10f      	bne.n	800055a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d809      	bhi.n	8000554 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f8e1 	bl	800070e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800054c:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <HAL_InitTick+0x74>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	e007      	b.n	8000564 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e004      	b.n	8000564 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
 800055e:	e001      	b.n	8000564 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000560:	2301      	movs	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000008 	.word	0x20000008
 8000574:	20000000 	.word	0x20000000
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200000bc 	.word	0x200000bc

08000594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	60d3      	str	r3, [r2, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <__NVIC_GetPriorityGrouping+0x18>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	f003 0307 	and.w	r3, r3, #7
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db0a      	blt.n	8000622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	490c      	ldr	r1, [pc, #48]	; (8000644 <__NVIC_SetPriority+0x4c>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	0112      	lsls	r2, r2, #4
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	440b      	add	r3, r1
 800061c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000620:	e00a      	b.n	8000638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4908      	ldr	r1, [pc, #32]	; (8000648 <__NVIC_SetPriority+0x50>)
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	f003 030f 	and.w	r3, r3, #15
 800062e:	3b04      	subs	r3, #4
 8000630:	0112      	lsls	r2, r2, #4
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	440b      	add	r3, r1
 8000636:	761a      	strb	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800064c:	b480      	push	{r7}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	f1c3 0307 	rsb	r3, r3, #7
 8000666:	2b04      	cmp	r3, #4
 8000668:	bf28      	it	cs
 800066a:	2304      	movcs	r3, #4
 800066c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3304      	adds	r3, #4
 8000672:	2b06      	cmp	r3, #6
 8000674:	d902      	bls.n	800067c <NVIC_EncodePriority+0x30>
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3b03      	subs	r3, #3
 800067a:	e000      	b.n	800067e <NVIC_EncodePriority+0x32>
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000680:	f04f 32ff 	mov.w	r2, #4294967295
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	43da      	mvns	r2, r3
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	401a      	ands	r2, r3
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000694:	f04f 31ff 	mov.w	r1, #4294967295
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	43d9      	mvns	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	4313      	orrs	r3, r2
         );
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3724      	adds	r7, #36	; 0x24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3b01      	subs	r3, #1
 80006c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c4:	d301      	bcc.n	80006ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2301      	movs	r3, #1
 80006c8:	e00f      	b.n	80006ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <SysTick_Config+0x40>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d2:	210f      	movs	r1, #15
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f7ff ff8e 	bl	80005f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <SysTick_Config+0x40>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <SysTick_Config+0x40>)
 80006e4:	2207      	movs	r2, #7
 80006e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff47 	bl	8000594 <__NVIC_SetPriorityGrouping>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000720:	f7ff ff5c 	bl	80005dc <__NVIC_GetPriorityGrouping>
 8000724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68b9      	ldr	r1, [r7, #8]
 800072a:	6978      	ldr	r0, [r7, #20]
 800072c:	f7ff ff8e 	bl	800064c <NVIC_EncodePriority>
 8000730:	4602      	mov	r2, r0
 8000732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff5d 	bl	80005f8 <__NVIC_SetPriority>
}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ffb0 	bl	80006b4 <SysTick_Config>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000760:	b480      	push	{r7}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076e:	e154      	b.n	8000a1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	2101      	movs	r1, #1
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	4013      	ands	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	f000 8146 	beq.w	8000a14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	2b01      	cmp	r3, #1
 8000792:	d005      	beq.n	80007a0 <HAL_GPIO_Init+0x40>
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	2b02      	cmp	r3, #2
 800079e:	d130      	bne.n	8000802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	2203      	movs	r2, #3
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007d6:	2201      	movs	r2, #1
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	4013      	ands	r3, r2
 80007e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	091b      	lsrs	r3, r3, #4
 80007ec:	f003 0201 	and.w	r2, r3, #1
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f003 0303 	and.w	r3, r3, #3
 800080a:	2b03      	cmp	r3, #3
 800080c:	d017      	beq.n	800083e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2203      	movs	r2, #3
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4013      	ands	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	4313      	orrs	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f003 0303 	and.w	r3, r3, #3
 8000846:	2b02      	cmp	r3, #2
 8000848:	d123      	bne.n	8000892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	08da      	lsrs	r2, r3, #3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3208      	adds	r2, #8
 8000852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	220f      	movs	r2, #15
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	4013      	ands	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	691a      	ldr	r2, [r3, #16]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4313      	orrs	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	08da      	lsrs	r2, r3, #3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3208      	adds	r2, #8
 800088c:	6939      	ldr	r1, [r7, #16]
 800088e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2203      	movs	r2, #3
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 0203 	and.w	r2, r3, #3
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 80a0 	beq.w	8000a14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d4:	4b58      	ldr	r3, [pc, #352]	; (8000a38 <HAL_GPIO_Init+0x2d8>)
 80008d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d8:	4a57      	ldr	r2, [pc, #348]	; (8000a38 <HAL_GPIO_Init+0x2d8>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6613      	str	r3, [r2, #96]	; 0x60
 80008e0:	4b55      	ldr	r3, [pc, #340]	; (8000a38 <HAL_GPIO_Init+0x2d8>)
 80008e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008ec:	4a53      	ldr	r2, [pc, #332]	; (8000a3c <HAL_GPIO_Init+0x2dc>)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	089b      	lsrs	r3, r3, #2
 80008f2:	3302      	adds	r3, #2
 80008f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	220f      	movs	r2, #15
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000916:	d019      	beq.n	800094c <HAL_GPIO_Init+0x1ec>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a49      	ldr	r2, [pc, #292]	; (8000a40 <HAL_GPIO_Init+0x2e0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d013      	beq.n	8000948 <HAL_GPIO_Init+0x1e8>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d00d      	beq.n	8000944 <HAL_GPIO_Init+0x1e4>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a47      	ldr	r2, [pc, #284]	; (8000a48 <HAL_GPIO_Init+0x2e8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d007      	beq.n	8000940 <HAL_GPIO_Init+0x1e0>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a46      	ldr	r2, [pc, #280]	; (8000a4c <HAL_GPIO_Init+0x2ec>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d101      	bne.n	800093c <HAL_GPIO_Init+0x1dc>
 8000938:	2304      	movs	r3, #4
 800093a:	e008      	b.n	800094e <HAL_GPIO_Init+0x1ee>
 800093c:	2307      	movs	r3, #7
 800093e:	e006      	b.n	800094e <HAL_GPIO_Init+0x1ee>
 8000940:	2303      	movs	r3, #3
 8000942:	e004      	b.n	800094e <HAL_GPIO_Init+0x1ee>
 8000944:	2302      	movs	r3, #2
 8000946:	e002      	b.n	800094e <HAL_GPIO_Init+0x1ee>
 8000948:	2301      	movs	r3, #1
 800094a:	e000      	b.n	800094e <HAL_GPIO_Init+0x1ee>
 800094c:	2300      	movs	r3, #0
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	f002 0203 	and.w	r2, r2, #3
 8000954:	0092      	lsls	r2, r2, #2
 8000956:	4093      	lsls	r3, r2
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800095e:	4937      	ldr	r1, [pc, #220]	; (8000a3c <HAL_GPIO_Init+0x2dc>)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	3302      	adds	r3, #2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800096c:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <HAL_GPIO_Init+0x2f0>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	43db      	mvns	r3, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000984:	2b00      	cmp	r3, #0
 8000986:	d003      	beq.n	8000990 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000990:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <HAL_GPIO_Init+0x2f0>)
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <HAL_GPIO_Init+0x2f0>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009ba:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <HAL_GPIO_Init+0x2f0>)
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <HAL_GPIO_Init+0x2f0>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <HAL_GPIO_Init+0x2f0>)
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_GPIO_Init+0x2f0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_GPIO_Init+0x2f0>)
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	3301      	adds	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	fa22 f303 	lsr.w	r3, r2, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f47f aea3 	bne.w	8000770 <HAL_GPIO_Init+0x10>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	371c      	adds	r7, #28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010000 	.word	0x40010000
 8000a40:	48000400 	.word	0x48000400
 8000a44:	48000800 	.word	0x48000800
 8000a48:	48000c00 	.word	0x48000c00
 8000a4c:	48001000 	.word	0x48001000
 8000a50:	40010400 	.word	0x40010400

08000a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
 8000a60:	4613      	mov	r3, r2
 8000a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a64:	787b      	ldrb	r3, [r7, #1]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a6a:	887a      	ldrh	r2, [r7, #2]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a70:	e002      	b.n	8000a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a72:	887a      	ldrh	r2, [r7, #2]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <HAL_PWREx_GetVoltageRange+0x18>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aae:	d130      	bne.n	8000b12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000abc:	d038      	beq.n	8000b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000acc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2232      	movs	r2, #50	; 0x32
 8000ad4:	fb02 f303 	mul.w	r3, r2, r3
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	0c9b      	lsrs	r3, r3, #18
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ae4:	e002      	b.n	8000aec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000af8:	d102      	bne.n	8000b00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f2      	bne.n	8000ae6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b0c:	d110      	bne.n	8000b30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e00f      	b.n	8000b32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b1e:	d007      	beq.n	8000b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40007000 	.word	0x40007000
 8000b44:	20000000 	.word	0x20000000
 8000b48:	431bde83 	.word	0x431bde83

08000b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e3fe      	b.n	800135c <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b5e:	4ba1      	ldr	r3, [pc, #644]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b68:	4b9e      	ldr	r3, [pc, #632]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 80e4 	beq.w	8000d48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d007      	beq.n	8000b96 <HAL_RCC_OscConfig+0x4a>
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	2b0c      	cmp	r3, #12
 8000b8a:	f040 808b 	bne.w	8000ca4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	f040 8087 	bne.w	8000ca4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b96:	4b93      	ldr	r3, [pc, #588]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <HAL_RCC_OscConfig+0x62>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e3d6      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a1a      	ldr	r2, [r3, #32]
 8000bb2:	4b8c      	ldr	r3, [pc, #560]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x7c>
 8000bbe:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bc6:	e005      	b.n	8000bd4 <HAL_RCC_OscConfig+0x88>
 8000bc8:	4b86      	ldr	r3, [pc, #536]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d223      	bcs.n	8000c20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fd53 	bl	8001688 <RCC_SetFlashLatencyFromMSIRange>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e3b7      	b.n	800135c <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bec:	4b7d      	ldr	r3, [pc, #500]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a7c      	ldr	r2, [pc, #496]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b7a      	ldr	r3, [pc, #488]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4977      	ldr	r1, [pc, #476]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c0a:	4b76      	ldr	r3, [pc, #472]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	4972      	ldr	r1, [pc, #456]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	604b      	str	r3, [r1, #4]
 8000c1e:	e025      	b.n	8000c6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c20:	4b70      	ldr	r3, [pc, #448]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a6f      	ldr	r2, [pc, #444]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b6d      	ldr	r3, [pc, #436]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	496a      	ldr	r1, [pc, #424]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c3e:	4b69      	ldr	r3, [pc, #420]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	4965      	ldr	r1, [pc, #404]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fd13 	bl	8001688 <RCC_SetFlashLatencyFromMSIRange>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e377      	b.n	800135c <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c6c:	f000 fc80 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 8000c70:	4602      	mov	r2, r0
 8000c72:	4b5c      	ldr	r3, [pc, #368]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	f003 030f 	and.w	r3, r3, #15
 8000c7c:	495a      	ldr	r1, [pc, #360]	; (8000de8 <HAL_RCC_OscConfig+0x29c>)
 8000c7e:	5ccb      	ldrb	r3, [r1, r3]
 8000c80:	f003 031f 	and.w	r3, r3, #31
 8000c84:	fa22 f303 	lsr.w	r3, r2, r3
 8000c88:	4a58      	ldr	r2, [pc, #352]	; (8000dec <HAL_RCC_OscConfig+0x2a0>)
 8000c8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c8c:	4b58      	ldr	r3, [pc, #352]	; (8000df0 <HAL_RCC_OscConfig+0x2a4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc37 	bl	8000504 <HAL_InitTick>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d052      	beq.n	8000d46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	e35b      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d032      	beq.n	8000d12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cac:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a4c      	ldr	r2, [pc, #304]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fc60 	bl	800057c <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cc0:	f7ff fc5c 	bl	800057c <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e344      	b.n	800135c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cd2:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f0      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a40      	ldr	r2, [pc, #256]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	493b      	ldr	r1, [pc, #236]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cfc:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	4936      	ldr	r1, [pc, #216]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
 8000d10:	e01a      	b.n	8000d48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d12:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a33      	ldr	r2, [pc, #204]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000d18:	f023 0301 	bic.w	r3, r3, #1
 8000d1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fc2d 	bl	800057c <HAL_GetTick>
 8000d22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d26:	f7ff fc29 	bl	800057c <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e311      	b.n	800135c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f0      	bne.n	8000d26 <HAL_RCC_OscConfig+0x1da>
 8000d44:	e000      	b.n	8000d48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d074      	beq.n	8000e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d005      	beq.n	8000d66 <HAL_RCC_OscConfig+0x21a>
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	2b0c      	cmp	r3, #12
 8000d5e:	d10e      	bne.n	8000d7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d10b      	bne.n	8000d7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d064      	beq.n	8000e3c <HAL_RCC_OscConfig+0x2f0>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d160      	bne.n	8000e3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e2ee      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d86:	d106      	bne.n	8000d96 <HAL_RCC_OscConfig+0x24a>
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e01d      	b.n	8000dd2 <HAL_RCC_OscConfig+0x286>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9e:	d10c      	bne.n	8000dba <HAL_RCC_OscConfig+0x26e>
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e00b      	b.n	8000dd2 <HAL_RCC_OscConfig+0x286>
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_RCC_OscConfig+0x298>)
 8000dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d01c      	beq.n	8000e14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dda:	f7ff fbcf 	bl	800057c <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000de0:	e011      	b.n	8000e06 <HAL_RCC_OscConfig+0x2ba>
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	08001bec 	.word	0x08001bec
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fbc2 	bl	800057c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e2aa      	b.n	800135c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e06:	4baf      	ldr	r3, [pc, #700]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f0      	beq.n	8000df4 <HAL_RCC_OscConfig+0x2a8>
 8000e12:	e014      	b.n	8000e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e14:	f7ff fbb2 	bl	800057c <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fbae 	bl	800057c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e296      	b.n	800135c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e2e:	4ba5      	ldr	r3, [pc, #660]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x2d0>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d060      	beq.n	8000f0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d005      	beq.n	8000e5c <HAL_RCC_OscConfig+0x310>
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2b0c      	cmp	r3, #12
 8000e54:	d119      	bne.n	8000e8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d116      	bne.n	8000e8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e5c:	4b99      	ldr	r3, [pc, #612]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <HAL_RCC_OscConfig+0x328>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e273      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e74:	4b93      	ldr	r3, [pc, #588]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	061b      	lsls	r3, r3, #24
 8000e82:	4990      	ldr	r1, [pc, #576]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000e84:	4313      	orrs	r3, r2
 8000e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e88:	e040      	b.n	8000f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d023      	beq.n	8000eda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e92:	4b8c      	ldr	r3, [pc, #560]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a8b      	ldr	r2, [pc, #556]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fb6d 	bl	800057c <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea6:	f7ff fb69 	bl	800057c <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e251      	b.n	800135c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eb8:	4b82      	ldr	r3, [pc, #520]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f0      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec4:	4b7f      	ldr	r3, [pc, #508]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	061b      	lsls	r3, r3, #24
 8000ed2:	497c      	ldr	r1, [pc, #496]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
 8000ed8:	e018      	b.n	8000f0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eda:	4b7a      	ldr	r3, [pc, #488]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a79      	ldr	r2, [pc, #484]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fb49 	bl	800057c <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eee:	f7ff fb45 	bl	800057c <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e22d      	b.n	800135c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f00:	4b70      	ldr	r3, [pc, #448]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f0      	bne.n	8000eee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d03c      	beq.n	8000f92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d01c      	beq.n	8000f5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f20:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f26:	4a67      	ldr	r2, [pc, #412]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f30:	f7ff fb24 	bl	800057c <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fb20 	bl	800057c <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e208      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f4a:	4b5e      	ldr	r3, [pc, #376]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0ef      	beq.n	8000f38 <HAL_RCC_OscConfig+0x3ec>
 8000f58:	e01b      	b.n	8000f92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f60:	4a58      	ldr	r2, [pc, #352]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fb07 	bl	800057c <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f72:	f7ff fb03 	bl	800057c <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e1eb      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f84:	4b4f      	ldr	r3, [pc, #316]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1ef      	bne.n	8000f72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80a6 	beq.w	80010ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fa4:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10d      	bne.n	8000fcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fcc:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <HAL_RCC_OscConfig+0x57c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d118      	bne.n	800100a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_RCC_OscConfig+0x57c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a3a      	ldr	r2, [pc, #232]	; (80010c8 <HAL_RCC_OscConfig+0x57c>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff faca 	bl	800057c <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fec:	f7ff fac6 	bl	800057c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e1ae      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <HAL_RCC_OscConfig+0x57c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d108      	bne.n	8001024 <HAL_RCC_OscConfig+0x4d8>
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8001014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001018:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001022:	e024      	b.n	800106e <HAL_RCC_OscConfig+0x522>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b05      	cmp	r3, #5
 800102a:	d110      	bne.n	800104e <HAL_RCC_OscConfig+0x502>
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 800102e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001032:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 800103e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001042:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800104c:	e00f      	b.n	800106e <HAL_RCC_OscConfig+0x522>
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8001050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001054:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8001056:	f023 0301 	bic.w	r3, r3, #1
 800105a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8001060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8001066:	f023 0304 	bic.w	r3, r3, #4
 800106a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d016      	beq.n	80010a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001076:	f7ff fa81 	bl	800057c <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fa7d 	bl	800057c <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	; 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e163      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_RCC_OscConfig+0x578>)
 8001096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0ed      	beq.n	800107e <HAL_RCC_OscConfig+0x532>
 80010a2:	e01a      	b.n	80010da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	f7ff fa6a 	bl	800057c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010aa:	e00f      	b.n	80010cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ac:	f7ff fa66 	bl	800057c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d906      	bls.n	80010cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e14c      	b.n	800135c <HAL_RCC_OscConfig+0x810>
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010cc:	4ba5      	ldr	r3, [pc, #660]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80010ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e8      	bne.n	80010ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010da:	7ffb      	ldrb	r3, [r7, #31]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d105      	bne.n	80010ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e0:	4ba0      	ldr	r3, [pc, #640]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	4a9f      	ldr	r2, [pc, #636]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80010e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d03c      	beq.n	8001172 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d01c      	beq.n	800113a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001100:	4b98      	ldr	r3, [pc, #608]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001106:	4a97      	ldr	r2, [pc, #604]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001110:	f7ff fa34 	bl	800057c <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001118:	f7ff fa30 	bl	800057c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e118      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800112a:	4b8e      	ldr	r3, [pc, #568]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800112c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0ef      	beq.n	8001118 <HAL_RCC_OscConfig+0x5cc>
 8001138:	e01b      	b.n	8001172 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800113a:	4b8a      	ldr	r3, [pc, #552]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800113c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001140:	4a88      	ldr	r2, [pc, #544]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114a:	f7ff fa17 	bl	800057c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001152:	f7ff fa13 	bl	800057c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e0fb      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001164:	4b7f      	ldr	r3, [pc, #508]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1ef      	bne.n	8001152 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80ef 	beq.w	800135a <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	2b02      	cmp	r3, #2
 8001182:	f040 80c5 	bne.w	8001310 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001186:	4b77      	ldr	r3, [pc, #476]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	429a      	cmp	r2, r3
 8001198:	d12c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	3b01      	subs	r3, #1
 80011a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d123      	bne.n	80011f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d11b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d113      	bne.n	80011f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d6:	085b      	lsrs	r3, r3, #1
 80011d8:	3b01      	subs	r3, #1
 80011da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80011dc:	429a      	cmp	r2, r3
 80011de:	d109      	bne.n	80011f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	085b      	lsrs	r3, r3, #1
 80011ec:	3b01      	subs	r3, #1
 80011ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d067      	beq.n	80012c4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2b0c      	cmp	r3, #12
 80011f8:	d062      	beq.n	80012c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0a8      	b.n	800135c <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800120a:	4b56      	ldr	r3, [pc, #344]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a55      	ldr	r2, [pc, #340]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001214:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001216:	f7ff f9b1 	bl	800057c <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121e:	f7ff f9ad 	bl	800057c <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e095      	b.n	800135c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001230:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800123c:	4b49      	ldr	r3, [pc, #292]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_RCC_OscConfig+0x81c>)
 8001242:	4013      	ands	r3, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800124c:	3a01      	subs	r2, #1
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	4311      	orrs	r1, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001256:	0212      	lsls	r2, r2, #8
 8001258:	4311      	orrs	r1, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800125e:	0852      	lsrs	r2, r2, #1
 8001260:	3a01      	subs	r2, #1
 8001262:	0552      	lsls	r2, r2, #21
 8001264:	4311      	orrs	r1, r2
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800126a:	0852      	lsrs	r2, r2, #1
 800126c:	3a01      	subs	r2, #1
 800126e:	0652      	lsls	r2, r2, #25
 8001270:	4311      	orrs	r1, r2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001276:	06d2      	lsls	r2, r2, #27
 8001278:	430a      	orrs	r2, r1
 800127a:	493a      	ldr	r1, [pc, #232]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800127c:	4313      	orrs	r3, r2
 800127e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a37      	ldr	r2, [pc, #220]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800128a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800128c:	4b35      	ldr	r3, [pc, #212]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4a34      	ldr	r2, [pc, #208]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001296:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001298:	f7ff f970 	bl	800057c <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a0:	f7ff f96c 	bl	800057c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e054      	b.n	800135c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012be:	e04c      	b.n	800135a <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e04b      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d144      	bne.n	800135a <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a23      	ldr	r2, [pc, #140]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80012d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4a20      	ldr	r2, [pc, #128]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 80012e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012e8:	f7ff f948 	bl	800057c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff f944 	bl	800057c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e02c      	b.n	800135c <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x7a4>
 800130e:	e024      	b.n	800135a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b0c      	cmp	r3, #12
 8001314:	d01f      	beq.n	8001356 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800131c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001322:	f7ff f92b 	bl	800057c <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132a:	f7ff f927 	bl	800057c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e00f      	b.n	800135c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	4905      	ldr	r1, [pc, #20]	; (8001364 <HAL_RCC_OscConfig+0x818>)
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_RCC_OscConfig+0x820>)
 8001350:	4013      	ands	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
 8001354:	e001      	b.n	800135a <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	019d808c 	.word	0x019d808c
 800136c:	feeefffc 	.word	0xfeeefffc

08001370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0e7      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <HAL_RCC_ClockConfig+0x1ec>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d910      	bls.n	80013b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b72      	ldr	r3, [pc, #456]	; (800155c <HAL_RCC_ClockConfig+0x1ec>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 0207 	bic.w	r2, r3, #7
 800139a:	4970      	ldr	r1, [pc, #448]	; (800155c <HAL_RCC_ClockConfig+0x1ec>)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b6e      	ldr	r3, [pc, #440]	; (800155c <HAL_RCC_ClockConfig+0x1ec>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0cf      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d010      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d908      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d0:	4b63      	ldr	r3, [pc, #396]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4960      	ldr	r1, [pc, #384]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d04c      	beq.n	8001488 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f6:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d121      	bne.n	8001446 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0a6      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140e:	4b54      	ldr	r3, [pc, #336]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d115      	bne.n	8001446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e09a      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e08e      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e086      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f023 0203 	bic.w	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4943      	ldr	r1, [pc, #268]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001458:	f7ff f890 	bl	800057c <HAL_GetTick>
 800145c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145e:	e00a      	b.n	8001476 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001460:	f7ff f88c 	bl	800057c <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	; 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e06e      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 020c 	and.w	r2, r3, #12
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	429a      	cmp	r2, r3
 8001486:	d1eb      	bne.n	8001460 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d010      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d208      	bcs.n	80014b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	492b      	ldr	r1, [pc, #172]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <HAL_RCC_ClockConfig+0x1ec>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d210      	bcs.n	80014e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_ClockConfig+0x1ec>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 0207 	bic.w	r2, r3, #7
 80014cc:	4923      	ldr	r1, [pc, #140]	; (800155c <HAL_RCC_ClockConfig+0x1ec>)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_RCC_ClockConfig+0x1ec>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e036      	b.n	8001554 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4918      	ldr	r1, [pc, #96]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4910      	ldr	r1, [pc, #64]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001524:	f000 f824 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	490b      	ldr	r1, [pc, #44]	; (8001564 <HAL_RCC_ClockConfig+0x1f4>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1f8>)
 8001542:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1fc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ffdb 	bl	8000504 <HAL_InitTick>
 800154e:	4603      	mov	r3, r0
 8001550:	72fb      	strb	r3, [r7, #11]

  return status;
 8001552:	7afb      	ldrb	r3, [r7, #11]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40022000 	.word	0x40022000
 8001560:	40021000 	.word	0x40021000
 8001564:	08001bec 	.word	0x08001bec
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157e:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001588:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x34>
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d121      	bne.n	80015e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d11e      	bne.n	80015e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015b0:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 80015b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e005      	b.n	80015cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015cc:	4a2b      	ldr	r2, [pc, #172]	; (800167c <HAL_RCC_GetSysClockFreq+0x10c>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10d      	bne.n	80015f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d102      	bne.n	80015ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_RCC_GetSysClockFreq+0x110>)
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	e004      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_RCC_GetSysClockFreq+0x114>)
 80015f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b0c      	cmp	r3, #12
 80015fc:	d134      	bne.n	8001668 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0xa6>
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d003      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0xac>
 8001614:	e005      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_RCC_GetSysClockFreq+0x110>)
 8001618:	617b      	str	r3, [r7, #20]
      break;
 800161a:	e005      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_RCC_GetSysClockFreq+0x114>)
 800161e:	617b      	str	r3, [r7, #20]
      break;
 8001620:	e002      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	617b      	str	r3, [r7, #20]
      break;
 8001626:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	3301      	adds	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	fb02 f203 	mul.w	r2, r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_RCC_GetSysClockFreq+0x108>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	0e5b      	lsrs	r3, r3, #25
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	3301      	adds	r3, #1
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001668:	69bb      	ldr	r3, [r7, #24]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	08001bfc 	.word	0x08001bfc
 8001680:	00f42400 	.word	0x00f42400
 8001684:	007a1200 	.word	0x007a1200

08001688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016a0:	f7ff f9f0 	bl	8000a84 <HAL_PWREx_GetVoltageRange>
 80016a4:	6178      	str	r0, [r7, #20]
 80016a6:	e014      	b.n	80016d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	4a24      	ldr	r2, [pc, #144]	; (8001740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6593      	str	r3, [r2, #88]	; 0x58
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016c0:	f7ff f9e0 	bl	8000a84 <HAL_PWREx_GetVoltageRange>
 80016c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d8:	d10b      	bne.n	80016f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b80      	cmp	r3, #128	; 0x80
 80016de:	d919      	bls.n	8001714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2ba0      	cmp	r3, #160	; 0xa0
 80016e4:	d902      	bls.n	80016ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016e6:	2302      	movs	r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	e013      	b.n	8001714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016ec:	2301      	movs	r3, #1
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	e010      	b.n	8001714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	d902      	bls.n	80016fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80016f8:	2303      	movs	r3, #3
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	e00a      	b.n	8001714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b80      	cmp	r3, #128	; 0x80
 8001702:	d102      	bne.n	800170a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001704:	2302      	movs	r3, #2
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	e004      	b.n	8001714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b70      	cmp	r3, #112	; 0x70
 800170e:	d101      	bne.n	8001714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 0207 	bic.w	r2, r3, #7
 800171c:	4909      	ldr	r1, [pc, #36]	; (8001744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	40022000 	.word	0x40022000

08001748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <xTaskIncrementTick+0x200>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 80ec 	bne.w	8001934 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800175c:	4b7b      	ldr	r3, [pc, #492]	; (800194c <xTaskIncrementTick+0x204>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001764:	4a79      	ldr	r2, [pc, #484]	; (800194c <xTaskIncrementTick+0x204>)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d120      	bne.n	80017b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001770:	4b77      	ldr	r3, [pc, #476]	; (8001950 <xTaskIncrementTick+0x208>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00a      	beq.n	8001790 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800177a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800178c:	bf00      	nop
 800178e:	e7fe      	b.n	800178e <xTaskIncrementTick+0x46>
 8001790:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <xTaskIncrementTick+0x208>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <xTaskIncrementTick+0x20c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6d      	ldr	r2, [pc, #436]	; (8001950 <xTaskIncrementTick+0x208>)
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4a6d      	ldr	r2, [pc, #436]	; (8001954 <xTaskIncrementTick+0x20c>)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <xTaskIncrementTick+0x210>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a6b      	ldr	r2, [pc, #428]	; (8001958 <xTaskIncrementTick+0x210>)
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	f000 f957 	bl	8001a60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80017b2:	4b6a      	ldr	r3, [pc, #424]	; (800195c <xTaskIncrementTick+0x214>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a3a      	ldr	r2, [r7, #32]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f0c0 80a6 	bcc.w	800190a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017be:	4b64      	ldr	r3, [pc, #400]	; (8001950 <xTaskIncrementTick+0x208>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017c8:	4b64      	ldr	r3, [pc, #400]	; (800195c <xTaskIncrementTick+0x214>)
 80017ca:	f04f 32ff 	mov.w	r2, #4294967295
 80017ce:	601a      	str	r2, [r3, #0]
                    break;
 80017d0:	e09b      	b.n	800190a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017d2:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <xTaskIncrementTick+0x208>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80017e2:	6a3a      	ldr	r2, [r7, #32]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d203      	bcs.n	80017f2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80017ea:	4a5c      	ldr	r2, [pc, #368]	; (800195c <xTaskIncrementTick+0x214>)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80017f0:	e08b      	b.n	800190a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	68d2      	ldr	r2, [r2, #12]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	6892      	ldr	r2, [r2, #8]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3304      	adds	r3, #4
 8001814:	429a      	cmp	r2, r3
 8001816:	d103      	bne.n	8001820 <xTaskIncrementTick+0xd8>
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01e      	beq.n	8001876 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	6a12      	ldr	r2, [r2, #32]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	69d2      	ldr	r2, [r2, #28]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	3318      	adds	r3, #24
 800185a:	429a      	cmp	r2, r3
 800185c:	d103      	bne.n	8001866 <xTaskIncrementTick+0x11e>
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2200      	movs	r2, #0
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	1e5a      	subs	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	2201      	movs	r2, #1
 800187c:	409a      	lsls	r2, r3
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <xTaskIncrementTick+0x218>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	4a36      	ldr	r2, [pc, #216]	; (8001960 <xTaskIncrementTick+0x218>)
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	4935      	ldr	r1, [pc, #212]	; (8001964 <xTaskIncrementTick+0x21c>)
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3304      	adds	r3, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	3204      	adds	r2, #4
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1d1a      	adds	r2, r3, #4
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4a26      	ldr	r2, [pc, #152]	; (8001964 <xTaskIncrementTick+0x21c>)
 80018cc:	441a      	add	r2, r3
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d6:	4923      	ldr	r1, [pc, #140]	; (8001964 <xTaskIncrementTick+0x21c>)
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	1c59      	adds	r1, r3, #1
 80018e6:	481f      	ldr	r0, [pc, #124]	; (8001964 <xTaskIncrementTick+0x21c>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4403      	add	r3, r0
 80018f2:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <xTaskIncrementTick+0x220>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	429a      	cmp	r2, r3
 8001900:	f4ff af5d 	bcc.w	80017be <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8001904:	2301      	movs	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001908:	e759      	b.n	80017be <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <xTaskIncrementTick+0x220>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001910:	4914      	ldr	r1, [pc, #80]	; (8001964 <xTaskIncrementTick+0x21c>)
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d901      	bls.n	8001926 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8001922:	2301      	movs	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <xTaskIncrementTick+0x224>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 800192e:	2301      	movs	r3, #1
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	e004      	b.n	800193e <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <xTaskIncrementTick+0x228>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <xTaskIncrementTick+0x228>)
 800193c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001940:	4618      	mov	r0, r3
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200000b0 	.word	0x200000b0
 800194c:	20000098 	.word	0x20000098
 8001950:	20000090 	.word	0x20000090
 8001954:	20000094 	.word	0x20000094
 8001958:	200000a8 	.word	0x200000a8
 800195c:	200000ac 	.word	0x200000ac
 8001960:	2000009c 	.word	0x2000009c
 8001964:	2000002c 	.word	0x2000002c
 8001968:	20000028 	.word	0x20000028
 800196c:	200000a4 	.word	0x200000a4
 8001970:	200000a0 	.word	0x200000a0

08001974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <vTaskSwitchContext+0xd0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <vTaskSwitchContext+0xd4>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001988:	e056      	b.n	8001a38 <vTaskSwitchContext+0xc4>
        xYieldPending = pdFALSE;
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <vTaskSwitchContext+0xd4>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8001990:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <vTaskSwitchContext+0xd8>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <vTaskSwitchContext+0xd8>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <vTaskSwitchContext+0xdc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d909      	bls.n	80019b6 <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <vTaskSwitchContext+0xd8>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <vTaskSwitchContext+0xdc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	1ad1      	subs	r1, r2, r3
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <vTaskSwitchContext+0xe0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b2:	440a      	add	r2, r1
 80019b4:	65da      	str	r2, [r3, #92]	; 0x5c
                ulTaskSwitchedInTime = ulTotalRunTime;
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <vTaskSwitchContext+0xd8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <vTaskSwitchContext+0xdc>)
 80019bc:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <vTaskSwitchContext+0xe4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	f1c3 031f 	rsb	r3, r3, #31
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	4921      	ldr	r1, [pc, #132]	; (8001a5c <vTaskSwitchContext+0xe8>)
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <vTaskSwitchContext+0x8a>
        __asm volatile
 80019e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ec:	f383 8811 	msr	BASEPRI, r3
 80019f0:	f3bf 8f6f 	isb	sy
 80019f4:	f3bf 8f4f 	dsb	sy
 80019f8:	607b      	str	r3, [r7, #4]
    }
 80019fa:	bf00      	nop
 80019fc:	e7fe      	b.n	80019fc <vTaskSwitchContext+0x88>
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <vTaskSwitchContext+0xe8>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3308      	adds	r3, #8
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d104      	bne.n	8001a2e <vTaskSwitchContext+0xba>
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <vTaskSwitchContext+0xe0>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	200000b0 	.word	0x200000b0
 8001a48:	200000a4 	.word	0x200000a4
 8001a4c:	200000b8 	.word	0x200000b8
 8001a50:	200000b4 	.word	0x200000b4
 8001a54:	20000028 	.word	0x20000028
 8001a58:	2000009c 	.word	0x2000009c
 8001a5c:	2000002c 	.word	0x2000002c

08001a60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <prvResetNextTaskUnblockTime+0x30>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d104      	bne.n	8001a78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <prvResetNextTaskUnblockTime+0x34>)
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a76:	e005      	b.n	8001a84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <prvResetNextTaskUnblockTime+0x30>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <prvResetNextTaskUnblockTime+0x34>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000090 	.word	0x20000090
 8001a94:	200000ac 	.word	0x200000ac
	...

08001aa0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <pxCurrentTCBConst2>)
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	6808      	ldr	r0, [r1, #0]
 8001aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aaa:	f380 8809 	msr	PSP, r0
 8001aae:	f3bf 8f6f 	isb	sy
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f380 8811 	msr	BASEPRI, r0
 8001aba:	4770      	bx	lr
 8001abc:	f3af 8000 	nop.w

08001ac0 <pxCurrentTCBConst2>:
 8001ac0:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
	...

08001ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001ad0:	f3ef 8009 	mrs	r0, PSP
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <pxCurrentTCBConst>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f01e 0f10 	tst.w	lr, #16
 8001ae0:	bf08      	it	eq
 8001ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aea:	6010      	str	r0, [r2, #0]
 8001aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001af4:	f380 8811 	msr	BASEPRI, r0
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f7ff ff38 	bl	8001974 <vTaskSwitchContext>
 8001b04:	f04f 0000 	mov.w	r0, #0
 8001b08:	f380 8811 	msr	BASEPRI, r0
 8001b0c:	bc09      	pop	{r0, r3}
 8001b0e:	6819      	ldr	r1, [r3, #0]
 8001b10:	6808      	ldr	r0, [r1, #0]
 8001b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b16:	f01e 0f10 	tst.w	lr, #16
 8001b1a:	bf08      	it	eq
 8001b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b20:	f380 8809 	msr	PSP, r0
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	f3af 8000 	nop.w

08001b30 <pxCurrentTCBConst>:
 8001b30:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop

08001b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
        __asm volatile
 8001b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b42:	f383 8811 	msr	BASEPRI, r3
 8001b46:	f3bf 8f6f 	isb	sy
 8001b4a:	f3bf 8f4f 	dsb	sy
 8001b4e:	607b      	str	r3, [r7, #4]
    }
 8001b50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001b52:	f7ff fdf9 	bl	8001748 <xTaskIncrementTick>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <SysTick_Handler+0x40>)
 8001b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001b6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	e000ed04 	.word	0xe000ed04

08001b7c <__libc_init_array>:
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	4d0d      	ldr	r5, [pc, #52]	; (8001bb4 <__libc_init_array+0x38>)
 8001b80:	4c0d      	ldr	r4, [pc, #52]	; (8001bb8 <__libc_init_array+0x3c>)
 8001b82:	1b64      	subs	r4, r4, r5
 8001b84:	10a4      	asrs	r4, r4, #2
 8001b86:	2600      	movs	r6, #0
 8001b88:	42a6      	cmp	r6, r4
 8001b8a:	d109      	bne.n	8001ba0 <__libc_init_array+0x24>
 8001b8c:	4d0b      	ldr	r5, [pc, #44]	; (8001bbc <__libc_init_array+0x40>)
 8001b8e:	4c0c      	ldr	r4, [pc, #48]	; (8001bc0 <__libc_init_array+0x44>)
 8001b90:	f000 f820 	bl	8001bd4 <_init>
 8001b94:	1b64      	subs	r4, r4, r5
 8001b96:	10a4      	asrs	r4, r4, #2
 8001b98:	2600      	movs	r6, #0
 8001b9a:	42a6      	cmp	r6, r4
 8001b9c:	d105      	bne.n	8001baa <__libc_init_array+0x2e>
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ba4:	4798      	blx	r3
 8001ba6:	3601      	adds	r6, #1
 8001ba8:	e7ee      	b.n	8001b88 <__libc_init_array+0xc>
 8001baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bae:	4798      	blx	r3
 8001bb0:	3601      	adds	r6, #1
 8001bb2:	e7f2      	b.n	8001b9a <__libc_init_array+0x1e>
 8001bb4:	08001c2c 	.word	0x08001c2c
 8001bb8:	08001c2c 	.word	0x08001c2c
 8001bbc:	08001c2c 	.word	0x08001c2c
 8001bc0:	08001c30 	.word	0x08001c30

08001bc4 <memset>:
 8001bc4:	4402      	add	r2, r0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d100      	bne.n	8001bce <memset+0xa>
 8001bcc:	4770      	bx	lr
 8001bce:	f803 1b01 	strb.w	r1, [r3], #1
 8001bd2:	e7f9      	b.n	8001bc8 <memset+0x4>

08001bd4 <_init>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	bf00      	nop
 8001bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bda:	bc08      	pop	{r3}
 8001bdc:	469e      	mov	lr, r3
 8001bde:	4770      	bx	lr

08001be0 <_fini>:
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	bf00      	nop
 8001be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be6:	bc08      	pop	{r3}
 8001be8:	469e      	mov	lr, r3
 8001bea:	4770      	bx	lr
